<?php

/**
 * @package Inxmail
 * @subpackage Recipient
 */
/**
 * An <i>Inx_Api_Recipient_UnsubscriptionRecipientRowSet</i> is best explained as a table of data representing a 
 * set of recipients, which is usually generated by executing a selection that queries unsubscribed recipients 
 * from the recipient context.
 * <P>
 * An <i>UnsubscriptionRecipientRowSet</i> object maintains a cursor pointing to its current row of data.
 * Initially the cursor is positioned before the first row. 
 * The <i>next()</i> method moves the cursor to the next row (recipient), and because it returns <i>false</i> when 
 * there are no more rows in the <i>UnsubscriptionRecipientRowSet</i>, it can be used in a <i>while</i> loop to 
 * iterate through the result set.
 * <p>
 * Be sure to call <i>next()</i> before the first retrieval statement on the row set. 
 * As stated above, initially the cursor is before the first row, thus no data can be retrieved from the row set 
 * before calling <i>next()</i>. 
 * Doing so will trigger an <i>Inx_Api_DataException</i>.
 * <P>
 * The <i>Inx_Api_Recipient_UnsubscriptionRecipientRowSet</i> interface provides <i>getter</i> methods (<i>getString</i>, 
 * <i>getInteger</i>, and so on) for retrieving attribute values from the current row. 
 * Values can be retrieved using the attribute object.
 * <p>
 * The following snippet shows how to retrieve the email address of all recipients in the row set (all recipients who
 * were unsubscribed from the specified list), thus also illustrating how to iterate over an
 * <i>UnsubscriptionRecipientRowSet</i>:
 * 
 * <pre>
 * $oRecipientContext = $oSession->createRecipientContext();
 * $oAttribute = $oRecipientContext->getMetaData()->getEmailAttribute();
 * $oListContext = $oSession->getListContextManager()->findByName( &quot;Desired list&quot; );
 * $oUnsubscriptionRecipientRowSet = $oRecipientContext->selectUnsubscriber( $oListContext );
 * 
 * while( $oUnsubscriptionRecipientRowSet->next() )
 * {
 * 	echo $oUnsubscriptionRecipientRowSet->getString( $oAttribute ).&quot;&#60;br&#62;&quot;;
 * }
 * 
 * $oUnsubscriptionRecipientRowSet->close();
 * </pre>
 * <P>
 * An <i>Inx_Api_Recipient_UnsubscriptionRecipientRowSet</i> offers no update methods. 
 * It's primary purpose is to resubscribe recipients, who were previously unsubscribed from a list. 
 * To update recipient data, either use an <i>Inx_Api_Recipient_RecipientRowSet</i> or the <I>Inx_Api_Recipient_BatchChannel</i>.
 * <p>
 * For resubscription of the recipient use the <i>resubscribe()</i> method. 
 * It offers a date parameter for setting a new subscription date. 
 * If you want to use the original subscription date set the parameter to <i>null</i>.
 * The following snippet shows how to resubscribe the first ten recipients in the row set using the current datetime 
 * as subscription date:
 * 
 * <pre>
 * $oRecipientContext = $oSession->createRecipientContext();
 * $oListContext = $oSession->getListContextManager()->findByName( &quot;Desired list&quot; );
 * $oUnsubscriptionRecipientRowSet = $oRecipientContext->selectUnsubscriber( $oListContext );
 * 
 * $oUnsubscriptionRecipientRowSet->setResubscribe( date('c'), new Inx_Api_IndexSelection( 0, 9 ) );
 * $oUnsubscriptionRecipientRowSet->close();
 * </pre>
 * 
 * Note: The <i>setResubscribe()</i> methods do not require a call to <i>commitRowUpdate()</i> to be reflected on the server. 
 * However, the <i>resubscribe()</i> method does.
 * <p>
 * <strong>Note:<strong> An <i>Inx_Api_Recipient_UnsubscriptionRecipientRowSet</i> object <strong>must</strong> be closed once 
 * it is not needed anymore to prevent memory leaks and other potentially harmful side effects.
 * <p>
 * For more information about recipients and the operations that can be performed on them, see the
 * <i>Inx_Api_Recipient_RecipientContext</i> documentation.
 * 
 * @see Inx_Api_Recipient_RecipientContext
 * @see Inx_Api_Recipient_RecipientRowSet
 * @since   API 1.6
 * @version $Revision: 9553 $ $Date: 2008-01-04 11:28:41 +0200 (Pn, 04 Sau 2008) $ $Author: vladas $
 * @package Inxmail
 * @subpackage Recipient
 */
interface Inx_Api_Recipient_UnsubscriptionRecipientRowSet
{

    /**
     * Moves the cursor to the front of this <i>Inx_Api_Recipient_UnsubscriptionRecipientRowSet</i> object, just before the first row. 
     * This method has no effect if the result set contains no rows.
     */
	public function beforeFirstRow();
	
    /**
     * Moves the cursor to the end of this <i>Inx_Api_Recipient_UnsubscriptionRecipientRowSet</i> object, just after the last row. 
     * This method has no effect if the result set contains no rows.
     */
	public function afterLastRow();
	
    /**
     * Moves the cursor to the given row number in this <i>Inx_Api_Recipient_UnsubscriptionRecipientRowSet</i> object.
     * The first row is row 0, the second is row 1, and so on. 
     *
     * @param int $iRow the number of the row to which the cursor should move.
     */
	public function setRow( $iRow );

    /**
     * Retrieves the current row number. The first row is number 0, the second number 1, and so on.  
     *
     * @return int the current row number.
     */
    public function getRow();

    /**
     * Moves the cursor down one row from its current position. 
     * An <i>Inx_Api_Recipient_UnsubscriptionRecipientRowSet</i> cursor is initially positioned before the first row; the 
     * first call to the method <i>next()</i> makes the first row the current row; the second call makes the second row 
     * the current row, and so on.
	 * 
	 * @return bool <i>true</i> if the new current row is valid, <i>false</i> if there are no more rows. 
     */
    public function next();
    
    /**
     * Moves the cursor to the previous row in this <i>Inx_Api_Recipient_UnsubscriptionRecipientRowSet</i> object.
     *
     * @return bool <i>true</i> if the cursor is on a valid row, <i>false</i> if it is off the result set.
     */
    public function previous();
    
	/**
	 * Returns the number of rows in this <i>Inx_Api_Recipient_UnsubscriptionRecipientRowSet</i> object.
	 *
	 * @return int the number of rows.
	 */
    public function getRowCount();    

    /**
     * Updates the underlying recipient on the server with the new contents of the current row of this
	 * <i>Inx_Api_Recipient_UnsubscriptionRecipientRowSet</i> object.
	 * 
	 * @throws Inx_Api_Recipient_BlackListException if the email address is blocked by a blacklist entry.
	 * @throws Inx_Api_Recipient_IllegalValueException if one of the attribute values is invalid.
	 * @throws Inx_Api_Recipient_DuplicateKeyException if the key value is already used.
	 * @throws Inx_Api_DataException if the recipient was deleted or no recipient is selected (e.g. you forgot to call
	 *             <i>next()</i>).
     */
    public function commitRowUpdate();

    
    /**
     * Deletes the current row from this <i>Inx_Api_Recipient_UnsubscriptionRecipientRowSet</i> object. 
     * This method cannot be called when the cursor is on the insert row. 
     * Do <strong>not</strong> call <i>commitRowUpdate()</i> after invoking this method, as this would trigger an 
     * <i>Inx_Api_DataException</i>.
     */
    public function deleteRow();
    
    /**
     * Deletes the specified rows from this <i>Inx_Api_Recipient_UnsubscriptionRecipientRowSet</i> object. 
     * Do <strong>not</strong> call <i>commitRowUpdate()</i> on an affected row after invoking this method, as this 
     * would trigger an <i>Inx_Api_DataException</i>.
	 * 
	 * @param Inx_Api_IndexSelection $oSelection the rows to be deleted.
     */
    public function deleteRows( Inx_Api_IndexSelection $oSelection );
    
    /**
     * Resubscribes the recipient. The resubscription will be processed after calling <code>commitRowUpdate()</code>.
	 * 
	 * @param subscriptionDate the subscription date. If <i>null</i> the original subscription date will be used.
	 * @since API 1.6.0
	 */
	public function resubscribe( $subscriptionDate );


	/**
	 * Resubscribes the recipients in the specified selection. 
	 * If the selection is ommitted, all recipients in this row set will be resubscribed.
	 * 
	 * @param subscriptionDate the subscription date. If <i>null</i> the original subscription date will be used.
	 * @param selection the selected rows. May be ommitted.
	 * @return <i>true</i>, if the recipients were resubscribed, <i>false</i> otherwise.
	 */
	public function setResubscribe( $subscriptionDate, Inx_Api_IndexSelection $oSelection=null );
    

    /**
     * Reports whether the underlying recipient is deleted or not.
     *
     * @return bool <i>true</i> if the underlying recipient is deleted, <i>false</i> otherwise.
     */
    public function isRowDeleted();    
  
    /**
     * Retrieves the recipient id in the current row of this <i>Inx_Api_Recipient_UnsubscriptionRecipientRowSet</i> object.
     *
     * @return int the recipient id in the current row.
     * @throws Inx_Api_DataException if the selected recipient is deleted.
     */
    public function getId();

    /**
     * Retrieves the value of the designated attribute in the current row of this 
     * <i>Inx_Api_Recipient_UnsubscriptionRecipientRowSet</i> object as a <i>string</i>.
	 * 
	 * @param Inx_Api_Recipient_Attribute $oAttr the designated attribute.
	 * @return string the attribute value as String.
	 * @exception Inx_Api_DataException if the recipient was deleted or no recipient is selected (e.g. you forgot to call
	 *                <i>next()</i>).
	 * @exception Inx_Api_IllegalStateException if the attribute is not of type <i>string</i>.
     */
    public function getString( Inx_Api_Recipient_Attribute $oAttr );

    /**
     * Retrieves the value of the designated attribute in the current row of this 
     * <i>Inx_Api_Recipient_UnsubscriptionRecipientRowSet</i> object as a <i>bool</i>.
	 * 
	 * @param Inx_Api_Recipient_Attribute $oAttr the designated attribute.
	 * @return bool the attribute value as bool.
	 * @exception Inx_Api_DataException if the recipient was deleted or no recipient is selected (e.g. you forgot to call
	 *                <i>next()</i>).
	 * @exception Inx_Api_IllegalStateException if the attribute is not of type <i>bool</i>.
     */
    public function getBoolean( Inx_Api_Recipient_Attribute $oAttr );

    /**
     * Retrieves the value of the designated attribute in the current row of this 
     * <i>Inx_Api_Recipient_UnsubscriptionRecipientRowSet</i> object as a <i>int</i>.
	 * 
	 * @param Inx_Api_Recipient_Attribute $oAttr the designated attribute.
	 * @return int the attribute value as int.
	 * @exception Inx_Api_DataException if the recipient was deleted or no recipient is selected (e.g. you forgot to call
	 *                <i>next()</i>).
	 * @exception Inx_Api_IllegalStateException if the attribute is not of type <i>int</i>.
     */
    public function getInteger( Inx_Api_Recipient_Attribute $oAttr );

    /**
     * Retrieves the value of the designated attribute in the current row of this 
     * <i>Inx_Api_Recipient_UnsubscriptionRecipientRowSet</i> object as a <i>double</i>.
	 * 
	 * @param Inx_Api_Recipient_Attribute $oAttr the designated attribute.
	 * @return double the attribute value as double.
	 * @exception Inx_Api_DataException if the recipient was deleted or no recipient is selected (e.g. you forgot to call
	 *                <i>next()</i>).
	 * @exception Inx_Api_IllegalStateException if the attribute is not of type <i>double</i>.
     */
    public function getDouble( Inx_Api_Recipient_Attribute $oAttr );

    /**
     * Retrieves the value of the designated attribute in the current row of this 
     * <i>Inx_Api_Recipient_UnsubscriptionRecipientRowSet</i> object as a <i>date</i>.
	 * 
	 * @param Inx_Api_Recipient_Attribute $oAttr the designated attribute.
	 * @return string the date value as ISO 8601 formatted date string. 
	 * @exception Inx_Api_DataException if the recipient was deleted or no recipient is selected (e.g. you forgot to call
	 *                <i>next()</i>).
	 * @exception Inx_Api_IllegalStateException if the attribute is not of type <i>date</i>.
     */
    public function getDate( Inx_Api_Recipient_Attribute $oAttr );

    /**
     * Retrieves the value of the designated attribute in the current row of this 
     * <i>Inx_Api_Recipient_UnsubscriptionRecipientRowSet</i> object as a <i>time</i>.
	 * 
	 * @param Inx_Api_Recipient_Attribute $oAttr the designated attribute.
	 * @return string the time value as ISO 8601 formatted time string. 
	 * @exception Inx_Api_DataException if the recipient was deleted or no recipient is selected (e.g. you forgot to call
	 *                <i>next()</i>).
	 * @exception Inx_Api_IllegalStateException if the attribute is not of type <i>time</i>.
     */
    public function getTime( Inx_Api_Recipient_Attribute $oAttr );
    
    /**
     * Retrieves the value of the designated attribute in the current row of this 
     * <i>Inx_Api_Recipient_UnsubscriptionRecipientRowSet</i> object as a <i>datetime</i>.
	 * 
	 * @param Inx_Api_Recipient_Attribute $oAttr the designated attribute.
	 * @return string the datetime value as ISO 8601 formatted datetime string. 
	 * @exception Inx_Api_DataException if the recipient was deleted or no recipient is selected (e.g. you forgot to call
	 *                <i>next()</i>).
	 * @exception Inx_Api_IllegalStateException if the attribute is not of type <i>datetime</i>.
     */
    public function getDatetime( Inx_Api_Recipient_Attribute $oAttr );

    /**
     * Retrieves the value of the designated attribute in the current row of this 
     * <i>Inx_Api_Recipient_UnsubscriptionRecipientRowSet</i> object as the same data type as the attribute.
	 * 
	 * @param Inx_Api_Recipient_Attribute $oAttr the designated attribute.
	 * @return mixed the attribute value. 
	 * @exception Inx_Api_DataException if the recipient was deleted or no recipient is selected (e.g. you forgot to call
	 *                <i>next()</i>).
     */
	public function getObject( Inx_Api_Recipient_Attribute $oAttr );
  
    
    /**
     * Releases the resources associated with this <i>Inx_Api_Recipient_UnsubscriptionRecipientRowSet</i> object on 
     * the server immediately.
     * <p>
     * An <i>Inx_Api_Recipient_UnsubscriptionRecipientRowSet</i> object <strong>must</strong> be closed once 
 	 * it is not needed anymore to prevent memory leaks and other potentially harmful side effects.
     */	
	public function close();
}
